name: Windows Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: '3.0.0'

permissions:
  contents: write

jobs:
  build-win:
    name: Build PluginLoader for Win
    runs-on: windows-2022

    steps:
    - name: Checkout 🧰
      uses: actions/checkout@v4

    - name: Set up NodeJS 20 💎
      uses: actions/setup-node@v4
      with:
        node-version: 20
      
    - name: Set up Python 3.11.7 🐍
      uses: actions/setup-python@v5
      with:
        python-version: "3.11.7"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: false

    - name: Override version in pyproject.toml 🔖
      working-directory: ./backend
      run: |
        $version = "${{ github.event.inputs.version }}"
        (Get-Content pyproject.toml) -replace 'version\s*=\s*".*"', "version = `"$version`"" | Set-Content pyproject.toml
        Write-Host "Set version to $version"

    - name: Install Python dependencies ⬇️
      working-directory: ./backend
      run: |
        C:\Users\runneradmin\.local\bin\poetry install --no-interaction

    - name: Install JS dependencies ⬇️
      working-directory: ./frontend
      run: |
        npm i -g pnpm
        pnpm i --frozen-lockfile --dangerously-allow-all-builds

    - name: Build JS Frontend 🛠️
      working-directory: ./frontend
      run: pnpm run build

    - name: Build Python Backend 🛠️
      working-directory: ./backend
      run: |
        C:\Users\runneradmin\.local\bin\poetry run pyinstaller pyinstaller.spec

    - name: Build Python Backend (noconsole) 🛠️
      working-directory: ./backend
      run: $env:DECKY_NOCONSOLE = 1; C:\Users\runneradmin\.local\bin\poetry run pyinstaller pyinstaller.spec

    - name: Upload package artifact ⬆️
      uses: actions/upload-artifact@v4
      with:
        name: PluginLoader Win
        path: |
          ./backend/dist/PluginLoader.exe
          ./backend/dist/PluginLoader_noconsole.exe

    - name: Create Git tag 🏷️
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git tag -a "v${{ github.event.inputs.version }}" -m "Release v${{ github.event.inputs.version }}"
        git push origin "v${{ github.event.inputs.version }}"

    - name: Create GitHub Release 📦
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.event.inputs.version }}
        name: Release v${{ github.event.inputs.version }}
        body: |
          Windows build release for version **v${{ github.event.inputs.version }}**
        files: |
          backend/dist/PluginLoader.exe
          backend/dist/PluginLoader_noconsole.exe
